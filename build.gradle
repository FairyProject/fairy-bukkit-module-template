//file:noinspection GroovyAssignabilityCheck
plugins {
    id "java-library"
    id "io.fairyproject" version "0.7.0dev-SNAPSHOT" apply false
    id "io.spring.dependency-management" version "1.1.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

ext {
    isProd = System.properties['env'] == 'prod'
}

repositories {
    mavenLocal()
    mavenCentral()
}
version = "1.0.0"

allprojects {
    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        return
    }

    group = findProperty("plugin.package")
}

subprojects {
    version = rootProject.version

    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        project.tasks.withType(PublishToMavenRepository).configureEach { it.enabled = false }
        return
    }

    apply plugin: "java-library"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "com.github.johnrengelman.shadow"

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name "Jitpack"
            url "https://jitpack.io"
        }
        maven {
            name "Imanity"
            url "https://repo.imanity.dev/imanity-libraries"
        }
        maven {
            name "PaperMC"
            url "https://repo.papermc.io/repository/maven-public"
        }
        maven {
            name = "CodeMC"
            url = uri("https://repo.codemc.io/repository/maven-public/")
        }
    }

    dependencies {
        // Lombok
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
        testCompileOnly(libs.lombok)
        testAnnotationProcessor(libs.lombok)

        // Testing
        implementation("org.apache.commons:commons-compress:1.22")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    }

    shadowJar {
        if (isProd) {
            relocate("io.fairyproject", "" + findProperty("plugin.package") + ".fairy")
            relocate("net.kyori", "" + findProperty("plugin.package") + ".fairy.libs.kyori")
            //relocate("com.github.retrooper.packetevents", "" + findProperty("plugin.package") + ".fairy.libs.packetevents")
            relocate("dev.imanity.brew", "" + findProperty("plugin.package") + ".brew")
            relocate("org.yaml.snakeyaml", "" + findProperty("plugin.package") + ".snakeyaml")
            relocate("com.cryptomorin.xseries", "" + findProperty("plugin.package") + ".xseries")
            relocate("org.spongepowered.configurate", "" + findProperty("plugin.package") + ".libs.configurate")
            relocate("io.leangen.geantyref", "" + findProperty("plugin.package") + ".libs.geantyref")
            relocate("xyz.xenondevs.particle", "" + findProperty("plugin.package") + ".libs.particle")

            minimize {
                exclude(dependency("io.fairyproject:.*:.*"))
                exclude(dependency("org.apache.commons.compress:.*:.*"))
            }

            dependencies {
                exclude(dependency("com.google.*:.*:.*"))
                //exclude(dependency("net.kyori:.*:.*"))
                exclude(dependency("io.fairyproject.packetevents:.*:.*"))
            }
        }

        archiveFileName.set(archiveFileName.get().split("-")[0] + ".jar")
    }

    build {
        dependsOn(shadowJar)
    }

    test {
        useJUnitPlatform()
    }
}

static boolean isNotJavaProject(Project project) {
    return project.buildFile == null || !project.buildFile.exists()
}
